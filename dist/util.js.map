{"version":3,"sources":["util.js"],"names":["writeFileFromTemplate","loadConfiguration","getConfiguration","getHttpApplication","_","ejs","fs","path","configurationDefaults","_dasherize","s","isString","trim","replace","toLowerCase","dasherize","mixin","source","dest","data","renderFile","then","res","Promise","resolve","reject","writeFile","err","config","require","process","cwd","Object","assign","code","console","error","exit","options","HttpApplication","appModule","paths","log","app","out","strategy","getStrategy","DataConfigurationStrategy","adapterTypes","configurationAdapterTypes","getSourceAt","Array","isArray","forEach","configurationAdapterType","invariantName","adapterModulePath","type","adapterModule","name","createInstance"],"mappings":"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","file":"util.js","sourcesContent":["import _ from 'lodash';\nimport ejs from 'ejs';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nconst configurationDefaults = {\n                \"base\":\"server\",\n                \"out\": \"dist/server\"\n            };\n\n/**\n *\n * @param s\n * @returns {*}\n * @private\n */\nfunction _dasherize(s) {\n    if (_.isString(s))\n        return _.trim(s).replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').replace(/^-/,'').toLowerCase();\n    return s;\n}\n\n/**\n * @method dasherize\n * @memberOf _\n */\nif (typeof _.dasherize !== 'function') {\n    _.mixin({'dasherize' : _dasherize});\n}\n\nexport function writeFileFromTemplate(source, dest, data) {\n    return ejs.renderFile(source, data).then((res)=> {\n        return new Promise((resolve, reject)=> {\n            //write file\n            fs.writeFile(dest, res, (err) => {\n              if (err) {\n                    return reject(err);\n              }\n              return resolve();\n            });\n        });\n        \n    });\n}\n\nexport function loadConfiguration() {\n    let config = require(path.resolve(process.cwd(), '.themost-cli.json'));\n    return Object.assign({}, configurationDefaults, config);\n}\n\nexport function getConfiguration() {\n    try {\n        return loadConfiguration();\n    }\n    catch(err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n            console.error('ERROR','Configuration cannot be found. It seems that current working directory does not contain a MOST Web Framework project.');\n            process.exit(1);\n        }\n        else {\n            console.error('ERROR','An error occurred while loading configuration.');\n            console.error(err);\n            process.exit(1);\n        }\n    }\n}\n\nexport function getHttpApplication(options) {\n    let HttpApplication;\n    try {\n        let appModule = require.resolve('@themost/web/app',{\n            paths:[path.resolve(process.cwd(), 'node_modules')]\n        });\n        HttpApplication = require(appModule).HttpApplication;\n    }\n    catch(err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n            console.error('ERROR','MOST Web Framework module cannot be found.');\n        }\n        else {\n            console.error('ERROR','An error occurred while trying to initialize MOST Web Framework Application.');\n            console.error(err);\n        }\n        return process.exit(1);\n    }\n    console.log('INFO','Initializing application');\n    let app  = new HttpApplication(path.resolve(process.cwd(), options.out));\n        let strategy = app.getConfiguration().getStrategy(function DataConfigurationStrategy() {\n        });\n        //get adapter types\n        let adapterTypes = strategy.adapterTypes;\n        //get configuration adapter types\n        let configurationAdapterTypes = app.getConfiguration().getSourceAt('adapterTypes');\n        if (Array.isArray(configurationAdapterTypes)) {\n            configurationAdapterTypes.forEach((configurationAdapterType)=> {\n                if (typeof adapterTypes[configurationAdapterType.invariantName] === 'undefined') {\n                    //load adapter type\n                    let adapterModulePath = require.resolve(configurationAdapterType.type,{\n                        paths:[path.resolve(process.cwd(), 'node_modules')]\n                    });\n                    let adapterModule = require(adapterModulePath);\n                    adapterTypes[configurationAdapterType.invariantName] = {\n                        invariantName:configurationAdapterType.invariantName,\n                        name: configurationAdapterType.name,\n                        createInstance:adapterModule.createInstance\n                    };\n                }\n            });\n        }\n    return app;\n}"]}