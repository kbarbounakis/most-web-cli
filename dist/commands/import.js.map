{"version":3,"sources":["commands/import.js"],"names":["builder","handler","path","fs","getConfiguration","command","desc","DateTimeRegex","reviveDates","key","value","test","Date","yargs","option","describe","default","argv","options","model","console","error","process","exit","dev","env","NODE_ENV","existsSync","file","HttpApplication","appModule","require","resolve","paths","cwd","err","code","log","data","readFile","str","JSON","parse","app","out","strategy","getStrategy","DataConfigurationStrategy","adapterTypes","configurationAdapterTypes","getSourceAt","Array","isArray","forEach","configurationAdapterType","invariantName","adapterModulePath","type","adapterModule","name","createInstance","execute","context","silent","save","then","finalize","catch"],"mappings":"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","file":"import.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport {getConfiguration} from '../util';\n\nexport const command = 'import <file> [options]';\n\nexport const desc = 'Import data';\n\nexport const DateTimeRegex = /^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\n\nfunction reviveDates(key, value){\n    if (typeof value === \"string\" && DateTimeRegex.test(value) ) {\n        return new Date(value);\n    }\n    return value;\n}\n\nexport function builder(yargs) {\n    return yargs.option('model', {\n        describe:'the target model'\n    }).option('dev', {\n        default: false,\n        describe: 'enables development mode'\n    });\n}\n\nexport function handler(argv) {\n    let options = getConfiguration();\n    if (typeof argv.model === 'undefined' || argv.model === null) {\n        console.error('ERROR','The target cannot be empty');\n        process.exit(1);\n    }\n    if (argv.dev) {\n        //set development mode\n        process.env.NODE_ENV='development';\n    }\n    if (!fs.existsSync(argv.file)) {\n        console.error('ERROR','Source data file cannot be found.');\n        return process.exit(1);\n    }\n    let HttpApplication;\n    try {\n        let appModule = require.resolve('@themost/web/app',{\n            paths:[path.resolve(process.cwd(), 'node_modules')]\n        });\n        HttpApplication = require(appModule).HttpApplication;\n    }\n    catch(err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n            console.error('ERROR','MOST Web Framework module cannot be found.');\n        }\n        else {\n            console.error('ERROR','An error occurred while trying to initialize MOST Web Framework Application.');\n            console.error(err);\n        }\n        return process.exit(1);\n    }\n    //get data\n    console.log('INFO','Getting source data');\n    let data;\n        return fs.readFile(path.resolve(process.cwd(),argv.file), 'utf8', (err, str)=> {\n            if (err) {\n                console.error('ERROR','An error occurred while trying to get source data.');\n                console.error(err);\n                return process.exit(1);\n            }\n\n            try {\n                data = JSON.parse(str, reviveDates);\n            }\n            catch(err) {\n                console.error('ERROR','An error occurred while converting source data.');\n                console.error(err);\n                return process.exit(1);\n            }\n\n            console.log('INFO','Initializing application');\n            let app;\n            try {\n                app  = new HttpApplication(path.resolve(process.cwd(), options.out));\n                let strategy = app.getConfiguration().getStrategy(function DataConfigurationStrategy() {\n                });\n                //get adapter types\n                let adapterTypes = strategy.adapterTypes;\n                //get configuration adapter types\n                let configurationAdapterTypes = app.getConfiguration().getSourceAt('adapterTypes');\n                if (Array.isArray(configurationAdapterTypes)) {\n                    configurationAdapterTypes.forEach((configurationAdapterType)=> {\n                        if (typeof adapterTypes[configurationAdapterType.invariantName] === 'undefined') {\n                            //load adapter type\n                            let adapterModulePath = require.resolve(configurationAdapterType.type,{\n                                paths:[path.resolve(process.cwd(), 'node_modules')]\n                            });\n                            let adapterModule = require(adapterModulePath);\n                            adapterTypes[configurationAdapterType.invariantName] = {\n                                invariantName:configurationAdapterType.invariantName,\n                                name: configurationAdapterType.name,\n                                createInstance:adapterModule.createInstance\n                            }\n                        }\n                    });\n                }\n            }\n            catch(err) {\n                console.error('ERROR','An error occurred while trying to get source data.');\n                console.error(err);\n                return process.exit(1);\n            }\n\n            app.execute((context)=> {\n                let model;\n                console.log('INFO','Getting target model');\n                try {\n                    model = context.model(argv.model);\n                    if (typeof model === 'undefined' || model === null) {\n                        console.error('ERROR','Target model cannot be found');\n                        return process.exit(1);\n                    }\n                }\n                catch(err) {\n                    console.error('ERROR','An error occurred while getting target model.');\n                    console.error(err);\n                    return process.exit(1);\n                }\n                model.silent().save(data).then(()=> {\n                    context.finalize(()=> {\n                        console.log('INFO','The operation was completed successfully');\n                        return process.exit(0);\n                    });\n                }).catch((err) => {\n                    console.error('ERROR','An error occurred while importing data.');\n                    console.error(err);\n                    return process.exit(1);\n                });\n            });\n        });\n}\n"]}