{"version":3,"sources":["commands/import.js"],"names":["builder","handler","path","fs","getConfiguration","command","desc","yargs","option","describe","default","argv","options","model","console","error","process","exit","dev","env","NODE_ENV","existsSync","file","HttpApplication","appModule","require","resolve","paths","cwd","err","code","log","data","app","dist","execute","context","silent","save","then","finalize","catch"],"mappings":"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","file":"import.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport {getConfiguration} from '../util';\n\nexport const command = 'import <file> [options]';\n\nexport const desc = 'Import data';\n\nexport function builder(yargs) {\n    return yargs.option('model', {\n        describe:'the target model'\n    }).option('dev', {\n        default: false,\n        describe: 'enables development mode'\n    });\n}\n\nexport function handler(argv) {\n    let options = getConfiguration();\n    if (typeof argv.model === 'undefined' || argv.model === null) {\n        console.error('ERROR','The target cannot be empty');\n        process.exit(1);\n    }\n    if (argv.dev) {\n        //set development mode\n        process.env.NODE_ENV='development';\n    }\n    if (!fs.existsSync(argv.file)) {\n        console.error('ERROR','Source data file cannot be found.');\n        return process.exit(1);\n    }\n    let HttpApplication;\n    try {\n        let appModule = require.resolve('@themost/web/app',{\n            paths:[path.resolve(process.cwd(), 'node_modules')]\n        });\n        HttpApplication = require(appModule).HttpApplication;\n    }\n    catch(err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n            console.error('ERROR','MOST Web Framework module cannot be found.');\n        }\n        else {\n            console.error('ERROR','An error occurred while trying to initialize MOST Web Framework Application.');\n            console.error(err);\n        }\n        return process.exit(1);\n    }\n    //get data\n    console.log('INFO','Getting source data');\n    let data;\n    try {\n        data = require(path.resolve(process.cwd(),argv.file));\n    }\n    catch(err) {\n        console.error('ERROR','An error occurred while trying to get source data.');\n        console.error(err);\n        return process.exit(1);\n    }\n    console.log('INFO','Initializing application');\n    let app;\n    try {\n        app  = new HttpApplication(path.resolve(process.cwd(), options.dist));\n    }\n    catch(err) {\n        console.error('ERROR','An error occurred while trying to get source data.');\n        console.error(err);\n        return process.exit(1);\n    }\n    \n    app.execute((context)=> {\n        let model;\n        console.log('INFO','Getting target model');\n        try {\n            model = context.model(argv.model);\n            if (typeof model === 'undefined' || model === null) {\n                console.error('ERROR','Target model cannot be found');\n                return process.exit(1);\n            }\n        }\n        catch(err) {\n            console.error('ERROR','An error occurred while getting target model.');\n            console.error(err);\n            return process.exit(1);\n        }\n        model.silent().save(data).then(()=> {\n            context.finalize(()=> {\n               console.log('INFO','The operation was completed successfully');\n               return process.exit(0);\n            });\n        }).catch((err) => {\n            console.error('ERROR','An error occurred while importing data.');\n            console.error(err);\n            return process.exit(1);\n        });\n    });\n}\n"]}