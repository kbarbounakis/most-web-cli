{"version":3,"sources":["commands/new_commands/project.js"],"names":["builder","handler","path","fs","command","desc","yargs","option","describe","choices","default","argv","projectRoot","resolve","process","cwd","directory","existsSync","readdirSync","length","console","error","exit","log","templateRoot","__dirname","template","copy","err"],"mappings":";;;;;;QAcgBA,O,GAAAA,O;QAQAC,O,GAAAA,O;;AAdhB;;IAAOC,I;;AACP;;IAAOC,E;;;;AATP;;;;;;;;AAUO,IAAMC,4BAAU,qBAAhB;;AAEA,IAAMC,sBAAO,sBAAb;;AAEA,SAASL,OAAT,CAAiBM,KAAjB,EAAwB;AAC3B,WAAOA,MAAMC,MAAN,CAAa,UAAb,EAAyB;AAC5BC,kBAAS,qBADmB;AAE5BC,iBAAS,CAAC,KAAD,EAAQ,SAAR,CAFmB;AAG5BC,iBAAQ;AAHoB,KAAzB,CAAP;AAKH;;AAEM,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AAC1B,QAAIC,cAAcV,KAAKW,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BJ,KAAKK,SAAjC,CAAlB;AACA,QAAIb,GAAGc,UAAH,CAAcL,WAAd,KAA8BT,GAAGe,WAAH,CAAeN,WAAf,EAA4BO,MAA5B,GAAmC,CAArE,EAAwE;AACpEC,gBAAQC,KAAR,CAAc,8CAAd;AACA,eAAOP,QAAQQ,IAAR,CAAa,CAAb,CAAP;AACH;AACDF,YAAQG,GAAR,CAAY,6BAAZ,EAA2CX,WAA3C;AACA;AACA,QAAKY,eAAetB,KAAKW,OAAL,CAAaY,SAAb,4BAAgDd,KAAKe,QAArD,cAApB;AACA;AACA,QAAI,CAACvB,GAAGc,UAAH,CAAcO,YAAd,CAAL,EAAkC;AAC9BJ,gBAAQC,KAAR,CAAc,gDAAd;AACA,eAAOP,QAAQQ,IAAR,CAAa,CAAb,CAAP;AACH;AACDnB,OAAGwB,IAAH,CAAQH,YAAR,EAAsBZ,WAAtB,EAAmC,eAAO;AAClC,YAAIgB,GAAJ,EAAS;AACLR,oBAAQC,KAAR,CAAc,wDAAd;AACAD,oBAAQC,KAAR,CAAcO,GAAd;AACA,mBAAOd,QAAQQ,IAAR,CAAa,CAAb,CAAP;AACH;AACDF,gBAAQG,GAAR,CAAY,sCAAZ;AACA,eAAOT,QAAQQ,IAAR,CAAa,CAAb,CAAP;AACH,KARL;AAUH","file":"project.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nexport const command = 'project <directory>';\n\nexport const desc = 'Create a new project';\n\nexport function builder(yargs) {\n    return yargs.option('template', {\n        describe:'the target template',\n        choices: ['api', 'express'],\n        default:'api'\n    });\n}\n\nexport function handler(argv) {\n    let projectRoot = path.resolve(process.cwd(), argv.directory);\n    if (fs.existsSync(projectRoot) && fs.readdirSync(projectRoot).length>0) {\n        console.error('ERROR: Project root directory must be empty.');\n        return process.exit(1);\n    }\n    console.log('Creating new project  at %s', projectRoot);\n    //get template path\n    let  templateRoot = path.resolve(__dirname, `./../../../templates/${argv.template}_project`);\n    //validate template folder\n    if (!fs.existsSync(templateRoot)) {\n        console.error('ERROR: The specified template cannot be found.');\n        return process.exit(1);\n    }\n    fs.copy(templateRoot, projectRoot, err => {\n            if (err) {\n                console.error('ERROR: An error occurred while generating new project.');\n                console.error(err);\n                return process.exit(1);\n            }\n            console.log('Operation was completed successfully');\n            return process.exit(0);\n        });\n    \n}"]}