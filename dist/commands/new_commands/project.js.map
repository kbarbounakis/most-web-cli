{"version":3,"sources":["commands/new_commands/project.js"],"names":["builder","handler","path","existsSync","readdirSync","copy","command","desc","yargs","option","describe","choices","default","type","argv","projectRoot","resolve","process","cwd","directory","length","console","error","exit","log","templateRoot","__dirname","template","typescript","err"],"mappings":";;;;;;QAcgBA,O,GAAAA,O;QAiBAC,O,GAAAA,O;;AAvBhB;;IAAOC,I;;AACP;;IAAQC,U,YAAAA,U;IAAYC,W,YAAAA,W;IAAaC,I,YAAAA,I;;;;AATjC;;;;;;;;AAUO,IAAMC,4BAAU,qBAAhB;;AAEA,IAAMC,sBAAO,sBAAb;;AAEA,SAASP,OAAT,CAAiBQ,KAAjB,EAAwB;AAC3B,WAAOA,MAAMC,MAAN,CAAa,UAAb,EAAyB;AAC5BC,kBAAS,qBADmB;AAE5BC,iBAAS,CAAC,KAAD,EAAQ,SAAR,EAAmB,SAAnB,CAFmB;AAG5BC,iBAAQ;AAHoB,KAAzB,EAIJH,MAJI,CAIG,WAJH,EAIgB;AACnBC,kBAAS,gCADU;AAEnBE,iBAAS,KAFU;AAGnBC,cAAM;AAHa,KAJhB,CAAP;AASH;;AAED;;;;;AAKO,SAASZ,OAAT,CAAiBa,IAAjB,EAAuB;AAC1B,QAAIC,cAAcb,KAAKc,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BJ,KAAKK,SAAjC,CAAlB;AACA,QAAIhB,WAAWY,WAAX,KAA2BX,YAAYW,WAAZ,EAAyBK,MAAzB,GAAgC,CAA/D,EAAkE;AAC9DC,gBAAQC,KAAR,CAAc,8CAAd;AACA,eAAOL,QAAQM,IAAR,CAAa,CAAb,CAAP;AACH;AACDF,YAAQG,GAAR,CAAY,6BAAZ,EAA2CT,WAA3C;AACA;AACA,QAAKU,eAAevB,KAAKc,OAAL,CAAaU,SAAb,4BAAgDZ,KAAKa,QAArD,cAApB;AACA,QAAIb,KAAKc,UAAT,EAAqB;AACjBH,uBAAevB,KAAKc,OAAL,CAAaU,SAAb,uCAA2DZ,KAAKa,QAAhE,cAAf;AACH;;AAED;AACA,QAAI,CAACxB,WAAWsB,YAAX,CAAL,EAA+B;AAC3BJ,gBAAQC,KAAR,CAAc,gDAAd;AACA,eAAOL,QAAQM,IAAR,CAAa,CAAb,CAAP;AACH;AACDlB,SAAKoB,YAAL,EAAmBV,WAAnB,EAAgC,eAAO;AAC/B,YAAIc,GAAJ,EAAS;AACLR,oBAAQC,KAAR,CAAc,wDAAd;AACAD,oBAAQC,KAAR,CAAcO,GAAd;AACA,mBAAOZ,QAAQM,IAAR,CAAa,CAAb,CAAP;AACH;AACDF,gBAAQG,GAAR,CAAY,sCAAZ;AACA,eAAOP,QAAQM,IAAR,CAAa,CAAb,CAAP;AACH,KARL;AAUH","file":"project.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport {existsSync, readdirSync, copy} from 'fs-extra';\nexport const command = 'project <directory>';\n\nexport const desc = 'Create a new project';\n\nexport function builder(yargs) {\n    return yargs.option('template', {\n        describe:'the target template',\n        choices: ['api', 'express', 'classic'],\n        default:'classic'\n    }).option('typescipt', {\n        describe:'generates a typescript project',\n        default: false,\n        type: 'boolean'\n    });\n}\n\n/**\n *\n * @param {{template: string, typescript: boolean, directory: string}} argv\n * @returns {*}\n */\nexport function handler(argv) {\n    let projectRoot = path.resolve(process.cwd(), argv.directory);\n    if (existsSync(projectRoot) && readdirSync(projectRoot).length>0) {\n        console.error('ERROR: Project root directory must be empty.');\n        return process.exit(1);\n    }\n    console.log('Creating new project  at %s', projectRoot);\n    //get template path\n    let  templateRoot = path.resolve(__dirname, `./../../../templates/${argv.template}_project`);\n    if (argv.typescript) {\n        templateRoot = path.resolve(__dirname, `./../../../templates/typescript/${argv.template}_project`);\n    }\n\n    //validate template folder\n    if (!existsSync(templateRoot)) {\n        console.error('ERROR: The specified template cannot be found.');\n        return process.exit(1);\n    }\n    copy(templateRoot, projectRoot, err => {\n            if (err) {\n                console.error('ERROR: An error occurred while generating new project.');\n                console.error(err);\n                return process.exit(1);\n            }\n            console.log('Operation was completed successfully');\n            return process.exit(0);\n        });\n    \n}"]}