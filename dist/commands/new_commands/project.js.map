{"version":3,"sources":["commands/new_commands/project.js"],"names":["builder","handler","path","crypto","existsSync","readdirSync","copy","readFile","writeFile","command","desc","yargs","option","describe","choices","default","type","argv","projectRoot","resolve","process","cwd","directory","length","console","error","exit","log","templateRoot","__dirname","template","typescript","err","Promise","all","updateApplicationConfiguration","then","catch","reject","appJsonPath","str","data","JSON","parse","randomBytes","buffer","settings","key","toString","auth","unattendedExecutionAccount","stringify"],"mappings":"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","file":"project.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport crypto from 'crypto';\nimport {existsSync, readdirSync, copy, readFile, writeFile} from 'fs-extra';\nexport const command = 'project <directory>';\n\n\nexport const desc = 'Create a new project';\n\nexport function builder(yargs) {\n    return yargs.option('template', {\n        describe:'the target template',\n        choices: ['api', 'express', 'classic'],\n        default:'classic'\n    }).option('typescipt', {\n        describe:'generates a typescript project',\n        default: false,\n        type: 'boolean'\n    });\n}\n\n/**\n *\n * @param {{template: string, typescript: boolean, directory: string}} argv\n * @returns {*}\n */\nexport function handler(argv) {\n    let projectRoot = path.resolve(process.cwd(), argv.directory);\n    if (existsSync(projectRoot) && readdirSync(projectRoot).length>0) {\n        console.error('ERROR: Project root directory must be empty.');\n        return process.exit(1);\n    }\n    console.log('Creating new project  at %s', projectRoot);\n    //get template path\n    let  templateRoot = path.resolve(__dirname, `./../../../templates/${argv.template}_project`);\n    if (argv.typescript) {\n        templateRoot = path.resolve(__dirname, `./../../../templates/typescript/${argv.template}_project`);\n    }\n\n    //validate template folder\n    if (!existsSync(templateRoot)) {\n        console.error('ERROR: The specified template cannot be found.');\n        return process.exit(1);\n    }\n    copy(templateRoot, projectRoot, err => {\n            if (err) {\n                console.error('ERROR: An error occurred while generating new project.');\n                console.error(err);\n                return process.exit(1);\n            }\n            Promise.all([\n                updateApplicationConfiguration(argv)\n                ]).then(()=> {\n                    console.log('Operation was completed successfully');\n                    return process.exit(0);\n                }).catch(err => {\n                    console.error('ERROR: An error occurred while executing post operations.');\n                    console.error(err);\n                    return process.exit(1);\n                });\n        });\n    \n}\n\nfunction updateApplicationConfiguration(argv) {\n    return new Promise((resolve, reject) => {\n        let projectRoot = path.resolve(process.cwd(), argv.directory);\n        let appJsonPath = path.resolve(projectRoot, 'server/config/app.json');\n        // generate application key\n        if (existsSync(appJsonPath)) {\n            return readFile(appJsonPath, 'utf8', (err, str)=> {\n               if (err) {\n                   return reject(err);\n               } \n               let data = JSON.parse(str);\n               return crypto.randomBytes(48, (err, buffer) => {\n                   if (err) {\n                       return reject(err);\n                   }\n                   // set application key\n                  data.settings.crypto.key = buffer.toString('hex');\n                  return crypto.randomBytes(12, (err, buffer) => {\n                       if (err) {\n                           return reject(err);\n                       }\n                       // set unattended execution account\n                      data.settings.auth.unattendedExecutionAccount = buffer.toString('base64');\n                      // write app.json\n                      return writeFile(appJsonPath, JSON.stringify(data, null, 4), 'utf8', (err) => {\n                          if (err) {\n                              return reject(err);\n                          }\n                          return resolve();\n                      })\n                    });\n                });\n            });\n        }\n        return resolve();\n    });\n}"]}