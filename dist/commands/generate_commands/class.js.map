{"version":3,"sources":["commands/generate_commands/class.js"],"names":["builder","generateClass","handler","path","fs","_","writeFileFromTemplate","getConfiguration","getDataConfiguration","SimpleDataContext","command","desc","yargs","option","default","describe","argv","Promise","resolve","reject","options","config","test","name","console","error","Error","context","emptyModel","upperFirst","camelCase","fields","attributes","inherits","dataTypes","model","inheritsClassPath","concat","dasherize","forEach","x","dataType","type","typeName","many","destFile","log","destPath","process","cwd","base","existsSync","silent","templateFile","__dirname","destFolder","dirname","ensureDir","err","then","Object","assign","catch","exit"],"mappings":"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","file":"class.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport { writeFileFromTemplate, getConfiguration, getDataConfiguration, SimpleDataContext } from '../../util';\n\nexport const command = 'class <name>';\n\nexport const desc = 'Generate a new data model class';\n\nexport function builder(yargs) {\n    return yargs.option('silent', {\n        default: false,\n        describe: 'disable errors'\n    });\n}\n\nexport function generateClass(argv) {\n    return new Promise((resolve, reject) => {\n        let options = getConfiguration();\n        let config = getDataConfiguration(options);\n        //validating name\n        if (!/^[a-zA-Z0-9_-]+$/.test(argv.name)) {\n            console.error('ERROR', 'An error occurred while validating class name.');\n            return reject(new Error('Class name is not valid. Expected only latin characters, numbers or \"_,-\" characters.'));\n        }\n        //--\n        let context = new SimpleDataContext(config);\n        //get model definition\n        let emptyModel = {\n                name: _.upperFirst(_.camelCase(argv.name)),\n                fields: [],\n                attributes:[],\n                inherits: null\n            };\n        let dataTypes = config.getDataConfiguration().dataTypes;\n        let model = context.model(argv.name) || emptyModel;\n        model.inherits = model.inherits || null; \n        if (model.inherits) {\n            model.inheritsClassPath = \"./\".concat(_.dasherize(model.inherits).concat('-model'));\n        }\n        model.attributes.forEach((x)=> {\n           //format data type\n            let dataType = dataTypes[x.type];\n            if (typeof x.type === 'undefined') {\n                x.typeName = x.many ?  \"Array<*>\" : \"*\";\n                return;\n            }\n            if (dataType) {\n                x.typeName = x.many ?  \"Array<\" + dataType.type + \">\" : dataType.type;\n                return;\n            }\n            x.typeName = x.many ?  \"Array<\" + x.type + \">\" : x.type;\n        });\n        //get file name\n        let destFile = _.dasherize(argv.name).concat('-model.js');\n        console.log('INFO', `Generating class ${destFile}`);\n        let destPath = path.resolve(process.cwd(), options.base, `models/${destFile}`);\n        console.log('INFO', `Validating class path ${destPath}`);\n        if (fs.existsSync(destPath)) {\n            if (argv.silent) {\n                console.error('WARNING', `The specified class [${argv.name}] already exists.`);\n                return resolve();\n            }\n            console.error('ERROR', 'An error occurred while validating class.');\n            return reject(new Error('The specified class already exists.'));\n        }\n        //get template file path\n        let templateFile = path.resolve(__dirname, '../../../templates/generate/class.js.ejs');\n        //get destination folder path\n        let destFolder = path.dirname(destPath);\n        console.error('INFO', `Validating class folder (${destFolder}).`);\n        fs.ensureDir(destFolder, (err) => {\n            if (err) {\n                console.error('ERROR', 'An error occurred while validating destination path.');\n                return reject(err);\n            }\n            writeFileFromTemplate(templateFile, destPath, model).then(() => {\n                console.log('INFO', 'The operation was completed succesfully.');\n                if (model.inherits) {\n                    return generateClass(Object.assign({}, argv, {\n                        \"name\": model.inherits\n                    })).then(()=> {\n                        return resolve();\n                    }).catch((err)=> {\n                        return reject(err);\n                    });\n                }\n                return resolve();\n            }).catch((err) => {\n                console.error('ERROR', 'An error occurred while generating data model class.');\n                return reject(err);\n            });\n\n        });\n    });\n}\n\nexport function handler(argv) {\n    generateClass(argv).then(() => {\n        return process.exit(0);\n    }).catch((err) => {\n        console.error(err);\n        return process.exit(1);\n    });\n}"]}