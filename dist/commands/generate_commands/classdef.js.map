{"version":3,"sources":["commands/generate_commands/classdef.js"],"names":["builder","generateAnyDefinition","generateDefinition","handler","path","fs","_","writeFileFromTemplate","getConfiguration","getDataConfiguration","SimpleDataContext","getBuilder","command","desc","yargs","option","default","describe","argv","options","config","sources","getEdm","then","schema","console","log","name","entityType","map","x","Object","assign","inProcDefinition","split","Promise","all","ignoreOther","resolve","reject","test","error","Error","context","indexOf","emptyModel","upperFirst","camelCase","fields","attributes","inherits","dataTypes","model","imports","modulePath","dasherize","concat","inheritsClassPath","push","forEach","dataType","type","typeName","many","hasOwnProperty","nullable","importModel","find","destFile","destPath","process","cwd","base","existsSync","force","silent","templateFile","__dirname","destFolder","dirname","ensureDir","err","generateExtra","filter","catch","exit"],"mappings":"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","file":"classdef.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport { writeFileFromTemplate, getConfiguration, getDataConfiguration, SimpleDataContext, getBuilder } from '../../util';\n\nexport const command = 'classdef <name>';\n\nexport const desc = 'Generate a new data model class definition';\n\nexport function builder(yargs) {\n    return yargs.option('silent', {\n        default: false,\n        describe: 'disable errors'\n    }).option('force', {\n        default: false,\n        describe: 'replace if exists'\n    });\n}\n\nexport function generateAnyDefinition(argv) {\n    \n    //get cli options\n    let options = getConfiguration();\n    //get data configuration\n    let config = getDataConfiguration(options);\n    //get OData Builder\n    let builder = getBuilder(config);\n    let sources = [];\n    return builder.getEdm().then((schema)=> {\n        console.log('INFO', argv);\n        if (argv.name === 'app' || argv.name === '*') {\n            sources = schema.entityType.map((x)=> {\n                return generateDefinition(Object.assign({\n                    inProcDefinition:[]\n                }, argv, {\n                    \"name\": x.name,\n                    \"silent\": true\n                }), true);\n            });\n        }\n        else {\n            sources = argv.name.split('+').map((x)=> {\n                return generateDefinition(Object.assign({\n                    inProcDefinition:[]\n                }, argv, {\n                    \"name\": x,\n                    \"silent\": true,\n                    \"ignoreOther\": true\n                }), false);\n            });\n        }\n        return Promise.all(sources);\n    });\n    \n}\n\nexport function generateDefinition(argv, ignoreOther) {\n    return new Promise((resolve, reject) => {\n        let options = getConfiguration();\n        let config = getDataConfiguration(options);\n        //validating name\n        if (!/^[a-zA-Z0-9_-]+$/.test(argv.name)) {\n            console.error('ERROR', 'An error occurred while validating class name.');\n            return reject(new Error('Class name is not valid. Expected only latin characters, numbers or \"_,-\" characters.'));\n        }\n        //--\n        let context = new SimpleDataContext(config);\n        argv.inProcDefinition = argv.inProcDefinition || [];\n        if (argv.inProcDefinition.indexOf(argv.name)>=0) {\n            return resolve();\n        }\n        //get OData Builder\n        let builder = getBuilder(config);\n        return builder.getEdm().then((schema)=> {\n            //get model definition\n            let emptyModel = {\n                    name: _.upperFirst(_.camelCase(argv.name)),\n                    fields: [],\n                    attributes:[],\n                    inherits: null\n                };\n            let dataTypes = config.getDataConfiguration().dataTypes;\n            let model = context.model(argv.name) || emptyModel;\n            model.inherits = model.inherits || null; \n            model.imports = [];\n            model.modulePath = _.dasherize(model.name).concat('-model');\n            if (model.inherits) {\n                model.inheritsClassPath = \"./\".concat(_.dasherize(model.inherits).concat('-model'));\n                model.imports.push({\n                  \"name\": model.inherits,\n                  \"from\": model.inheritsClassPath\n                });\n            }\n            else {\n                model.imports.push({\n                  \"name\": \"{DataObject}\",\n                  \"from\": \"@themost/data/data-object\"\n                });\n            }\n            model.attributes.forEach((x)=> {\n               //format data type\n                let dataType = dataTypes[x.type];\n                if (typeof x.type === 'undefined') {\n                    x.typeName = x.many ?  \"Array<*>\" : \"*\";\n                    return;\n                }\n                if (!x.hasOwnProperty('nullable')) {\n                    x.nullable = true;\n                }\n                //add import\n                if (x.model === model.name) {\n                    let importModel = context.model(x.type);\n                    if (importModel && importModel.name !== model.name) {\n                        if (typeof model.imports.find((x)=> { return x.name === importModel.name }) === 'undefined') {\n                            model.imports.push({\n                                \"name\": importModel.name,\n                                \"from\": \"./\".concat(_.dasherize(importModel.name).concat('-model'))\n                            });    \n                        }\n                        x.typeName = x.many ?  \"Array<\" + x.type + \"|any>\" : x.type + \"|any\";\n                        return;\n                    }    \n                }\n                if (dataType) {\n                    x.typeName = x.many ?  \"Array<\" + dataType.type + \">\" : dataType.type;\n                    return;\n                }\n                \n                x.typeName = x.many ?  \"Array<\" + x.type + \">\" : x.type;\n            });\n            //get file name\n            let destFile = _.dasherize(argv.name).concat('-model.d.ts');\n            console.log('INFO', `Generating class ${destFile}`);\n            let destPath = path.resolve(process.cwd(), options.base, `models/${destFile}`);\n            console.log('INFO', `Validating class path ${destPath}`);\n            if (fs.existsSync(destPath) && !argv.force) {\n                if (argv.silent) {\n                    console.error('WARNING', `The specified class [${argv.name}] already exists.`);\n                    return resolve();\n                }\n                console.error('ERROR', 'An error occurred while validating class definition.');\n                return reject(new Error('The specified class already exists.'));\n            }\n            //get template file path\n            let templateFile = path.resolve(__dirname, '../../../templates/generate/classdef.d.ts.ejs');\n            //get destination folder path\n            let destFolder = path.dirname(destPath);\n            console.error('INFO', `Validating class folder (${destFolder}).`);\n            fs.ensureDir(destFolder, (err) => {\n                if (err) {\n                    console.error('ERROR', 'An error occurred while validating destination path.');\n                    return reject(err);\n                }\n                writeFileFromTemplate(templateFile, destPath, model).then(() => {\n                    console.log('INFO', 'The operation was completed succesfully.');\n                    if (ignoreOther) {\n                        return resolve();\n                    }\n                    //add in-process class\n                    argv.inProcDefinition.push(model.name);\n                    let generateExtra = model.imports.filter((x)=> {\n                        return x.name !== \"{DataObject}\" && x.name !== model.name;\n                    }).map((x)=> {\n                        return generateDefinition(Object.assign({}, argv, {\n                            \"name\": x.name,\n                            \"silent\": true\n                        }));\n                    });\n                    Promise.all(generateExtra).then(()=> {\n                        return resolve();\n                    }).catch((err)=> {\n                        return reject(err);\n                    });\n                }).catch((err) => {\n                    console.error('ERROR', 'An error occurred while generating data model class.');\n                    return reject(err);\n                });\n    \n            }); \n        });\n    });\n}\n\nexport function handler(argv) {\n    generateAnyDefinition(argv).then(() => {\n        return process.exit(0);\n    }).catch((err) => {\n        console.error(err);\n        return process.exit(1);\n    });\n}"]}