{"version":3,"sources":["commands/generate_commands/listener.js"],"names":["handler","path","fs","_","writeFileFromTemplate","getConfiguration","command","desc","builder","argv","options","test","name","console","error","process","exit","listenerName","upperFirst","camelCase","concat","destFile","dasherize","mode","log","destPath","resolve","cwd","base","existsSync","templateFile","__dirname","destFolder","dirname","ensureDir","err","then","catch"],"mappings":";;;;;;QAoBgBA,O,GAAAA,O;;AAZhB;;IAAOC,I;;AACP;;IAAOC,E;;AACP;;IAAOC,C;;AACP;;IAAQC,qB,SAAAA,qB;IAAuBC,gB,SAAAA,gB;;;;AAX/B;;;;;;;;AAaO,IAAMC,4BAAU,iBAAhB;;AAEA,IAAMC,sBAAO,oCAAb;;AAEA,IAAMC,4BAAU,EAAhB;;AAGA,SAASR,OAAT,CAAiBS,IAAjB,EAAuB;AAC1B,QAAIC,UAAUL,kBAAd;AACA;AACA,QAAI,CAAC,mBAAmBM,IAAnB,CAAwBF,KAAKG,IAA7B,CAAL,EAAyC;AACrCC,gBAAQC,KAAR,CAAc,OAAd,EAAsB,0FAAtB;AACA,eAAOC,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH;AACD;AACA,QAAIC,eAAe,aAAaN,IAAb,CAAkBF,KAAKG,IAAvB,IAA+BT,EAAEe,UAAF,CAAaf,EAAEgB,SAAF,CAAYV,KAAKG,IAAjB,CAAb,CAA/B,GAAsET,EAAEe,UAAF,CAAaf,EAAEgB,SAAF,CAAYV,KAAKG,IAAL,CAAUQ,MAAV,CAAiB,WAAjB,CAAZ,CAAb,CAAzF;;AAEA;AACA,QAAIC,WAAWlB,EAAEmB,SAAF,CAAYL,YAAZ,EAA0BG,MAA1B,CAAiCV,QAAQa,IAAR,KAAe,YAAf,GAA8B,KAA9B,GAAqC,KAAtE,CAAf;AACAV,YAAQW,GAAR,CAAY,MAAZ,2BAA0CH,QAA1C;AACA,QAAII,WAAWxB,KAAKyB,OAAL,CAAaX,QAAQY,GAAR,EAAb,EAA4BjB,QAAQkB,IAApC,iBAAuDP,QAAvD,CAAf;AACAR,YAAQW,GAAR,CAAY,MAAZ,gCAA+CC,QAA/C;AACA,QAAIvB,GAAG2B,UAAH,CAAcJ,QAAd,CAAJ,EAA6B;AACzBZ,gBAAQC,KAAR,CAAc,OAAd,EAAsB,wCAAtB;AACA,eAAOC,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH;AACD;AACA,QAAIc,eAAe7B,KAAKyB,OAAL,CAAaK,SAAb,EAAuB,0CAA0CrB,QAAQa,IAAR,KAAe,YAAf,GAA8B,KAA9B,GAAqC,KAA/E,IAAwF,MAA/G,CAAnB;;AAEA;AACA,QAAIS,aAAa/B,KAAKgC,OAAL,CAAaR,QAAb,CAAjB;AACAZ,YAAQC,KAAR,CAAc,MAAd,mCAAoDkB,UAApD;AACA9B,OAAGgC,SAAH,CAAaF,UAAb,EAAyB,UAACG,GAAD,EAAQ;AAC9B,YAAIA,GAAJ,EAAS;AACLtB,oBAAQC,KAAR,CAAc,OAAd,EAAsB,sDAAtB;AACCD,oBAAQC,KAAR,CAAcqB,GAAd;AACJ;AACD/B,8BAAsB0B,YAAtB,EAAoCL,QAApC,EAA8C;AACzCb,kBAAKT,EAAEe,UAAF,CAAaf,EAAEgB,SAAF,CAAYV,KAAKG,IAAjB,CAAb;AADoC,SAA9C,EAEIwB,IAFJ,CAES,YAAK;AACTvB,oBAAQW,GAAR,CAAY,MAAZ,EAAmB,0CAAnB;AACE,mBAAOT,QAAQC,IAAR,CAAa,CAAb,CAAP;AACL,SALF,EAKIqB,KALJ,CAKU,UAACF,GAAD,EAAQ;AACbtB,oBAAQC,KAAR,CAAc,OAAd,EAAsB,8CAAtB;AACAD,oBAAQC,KAAR,CAAcqB,GAAd;AACA,mBAAOpB,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH,SATF;AAWF,KAhBD;AAoBH","file":"listener.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport {writeFileFromTemplate, getConfiguration} from '../../util';\n\nexport const command = 'listener <name>';\n\nexport const desc = 'Generate a new data model listener';\n\nexport const builder = {\n};\n\nexport function handler(argv) {\n    let options = getConfiguration();\n    //validating listener name\n    if (!/^[a-zA-Z0-9_-]+$/.test(argv.name)) {\n        console.error('ERROR','Listener name is not valid. Expected only latin characters, numbers or \"_,-\" characters.');\n        return process.exit(1);\n    }\n    //get service name\n    let listenerName = /listener$/i.test(argv.name) ? _.upperFirst(_.camelCase(argv.name)) : _.upperFirst(_.camelCase(argv.name.concat('-listener')));\n    \n    //get listener file name\n    let destFile = _.dasherize(listenerName).concat(options.mode==='typescript' ? '.ts': '.js');\n    console.log('INFO',`Generating listener ${destFile}`);\n    let destPath = path.resolve(process.cwd(), options.base, `listeners/${destFile}`);\n    console.log('INFO',`Validating listener path ${destPath}`);\n    if (fs.existsSync(destPath)) {\n        console.error('ERROR','The specified listener already exists.');\n        return process.exit(1);\n    }\n    //get template file path\n    let templateFile = path.resolve(__dirname,'../../../templates/generate/listener' + (options.mode==='typescript' ? '.ts': '.js') + '.ejs');\n    \n    //get destination folder path\n    let destFolder = path.dirname(destPath);\n    console.error('INFO',`Validating listener folder (${destFolder}).`);\n    fs.ensureDir(destFolder, (err)=> {\n       if (err) {\n           console.error('ERROR','An error occurred while validating destination path.');\n            console.error(err);\n       } \n       writeFileFromTemplate(templateFile, destPath, {\n            name:_.upperFirst(_.camelCase(argv.name))\n        }).then(()=> {\n            console.log('INFO','The operation was completed succesfully.');\n              return process.exit(0);\n        }).catch((err)=> {\n            console.error('ERROR','An error occurred while generating listener.');\n            console.error(err);\n            return process.exit(1);\n        });\n       \n    });\n    \n    \n    \n}"]}