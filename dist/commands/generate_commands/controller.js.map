{"version":3,"sources":["commands/generate_commands/controller.js"],"names":["handler","path","fs","_","writeFileFromTemplate","getConfiguration","command","desc","builder","argv","options","test","name","console","error","process","exit","controllerName","upperFirst","camelCase","concat","controllerFile","dasherize","mode","log","controllerPath","resolve","cwd","base","existsSync","templateFile","__dirname","destFolder","dirname","ensureDir","err","replace","then","catch"],"mappings":";;;;;;QAoBgBA,O,GAAAA,O;;AAZhB;;IAAOC,I;;AACP;;IAAOC,E;;AACP;;IAAOC,C;;AACP;;IAAQC,qB,SAAAA,qB;IAAuBC,gB,SAAAA,gB;;;;AAX/B;;;;;;;;AAaO,IAAMC,4BAAU,mBAAhB;;AAEA,IAAMC,sBAAO,2BAAb;;AAEA,IAAMC,4BAAU,EAAhB;;AAGA,SAASR,OAAT,CAAiBS,IAAjB,EAAuB;AAC1B,QAAIC,UAAUL,kBAAd;AACA;AACA,QAAI,CAAC,kBAAkBM,IAAlB,CAAuBF,KAAKG,IAA5B,CAAL,EAAwC;AACpCC,gBAAQC,KAAR,CAAc,OAAd,EAAsB,yFAAtB;AACA,eAAOC,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH;AACA;AACD,QAAIC,iBAAiB,eAAeN,IAAf,CAAoBF,KAAKG,IAAzB,IAAiCT,EAAEe,UAAF,CAAaf,EAAEgB,SAAF,CAAYV,KAAKG,IAAjB,CAAb,CAAjC,GAAwET,EAAEe,UAAF,CAAaf,EAAEgB,SAAF,CAAYV,KAAKG,IAAL,CAAUQ,MAAV,CAAiB,aAAjB,CAAZ,CAAb,CAA7F;AACA;AACA,QAAIC,iBAAiBlB,EAAEmB,SAAF,CAAYL,cAAZ,EAA4BG,MAA5B,CAAmCV,QAAQa,IAAR,KAAe,YAAf,GAA8B,KAA9B,GAAqC,KAAxE,CAArB;AACAV,YAAQW,GAAR,CAAY,MAAZ,6BAA4CH,cAA5C;AACA,QAAII,iBAAiBxB,KAAKyB,OAAL,CAAaX,QAAQY,GAAR,EAAb,EAA4BjB,QAAQkB,IAApC,mBAAyDP,cAAzD,CAArB;AACAR,YAAQW,GAAR,CAAY,MAAZ,kCAAiDC,cAAjD;AACA,QAAIvB,GAAG2B,UAAH,CAAcJ,cAAd,CAAJ,EAAmC;AAC/BZ,gBAAQC,KAAR,CAAc,OAAd,EAAsB,0CAAtB;AACA,eAAOC,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH;AACD;AACA,QAAIc,eAAe7B,KAAKyB,OAAL,CAAaK,SAAb,EAAuB,4CAA0CrB,QAAQa,IAAR,KAAe,YAAf,GAA8B,KAA9B,GAAqC,KAA/E,IAAsF,MAA7G,CAAnB;;AAEA;AACA,QAAIS,aAAa/B,KAAKgC,OAAL,CAAaR,cAAb,CAAjB;AACAZ,YAAQC,KAAR,CAAc,MAAd,qCAAsDkB,UAAtD;AACA9B,OAAGgC,SAAH,CAAaF,UAAb,EAAyB,UAACG,GAAD,EAAQ;AAC9B,YAAIA,GAAJ,EAAS;AACLtB,oBAAQC,KAAR,CAAc,OAAd,EAAsB,sDAAtB;AACCD,oBAAQC,KAAR,CAAcqB,GAAd;AACJ;AACD/B,8BAAsB0B,YAAtB,EAAoCL,cAApC,EAAoD;AAC/Cb,kBAAKK,eAAemB,OAAf,CAAuB,cAAvB,EAAsC,EAAtC;AAD0C,SAApD,EAEIC,IAFJ,CAES,YAAK;AACTxB,oBAAQW,GAAR,CAAY,MAAZ,EAAmB,0CAAnB;AACE,mBAAOT,QAAQC,IAAR,CAAa,CAAb,CAAP;AACL,SALF,EAKIsB,KALJ,CAKU,UAACH,GAAD,EAAQ;AACbtB,oBAAQC,KAAR,CAAc,OAAd,EAAsB,gDAAtB;AACAD,oBAAQC,KAAR,CAAcqB,GAAd;AACA,mBAAOpB,QAAQC,IAAR,CAAa,CAAb,CAAP;AACH,SATF;AAWF,KAhBD;AAkBH","file":"controller.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport path from 'path';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport {writeFileFromTemplate, getConfiguration} from '../../util';\n\nexport const command = 'controller <name>';\n\nexport const desc = 'Generate a new controller';\n\nexport const builder = {\n};\n\nexport function handler(argv) {\n    let options = getConfiguration();\n    //validating controller name\n    if (!/^[a-zA-Z0-9_]+$/.test(argv.name)) {\n        console.error('ERROR','Controller name is not valid. Expected only latin characters, numbers or \"_\" character.');\n        return process.exit(1);\n    }\n     //get controller name\n    let controllerName = /controller$/i.test(argv.name) ? _.upperFirst(_.camelCase(argv.name)) : _.upperFirst(_.camelCase(argv.name.concat('-controller')));\n    //get controller file name\n    let controllerFile = _.dasherize(controllerName).concat(options.mode==='typescript' ? '.ts': '.js');\n    console.log('INFO',`Generating controller ${controllerFile}`);\n    let controllerPath = path.resolve(process.cwd(), options.base, `controllers/${controllerFile}`);\n    console.log('INFO',`Validating controller path ${controllerPath}`);\n    if (fs.existsSync(controllerPath)) {\n        console.error('ERROR','The specified controller already exists.');\n        return process.exit(1);\n    }\n    //get template file path\n    let templateFile = path.resolve(__dirname,'../../../templates/generate/controller'+(options.mode==='typescript' ? '.ts': '.js')+'.ejs');\n    \n    //get destination folder path\n    let destFolder = path.dirname(controllerPath);\n    console.error('INFO',`Validating controller folder (${destFolder}).`);\n    fs.ensureDir(destFolder, (err)=> {\n       if (err) {\n           console.error('ERROR','An error occurred while validating destination path.');\n            console.error(err);\n       } \n       writeFileFromTemplate(templateFile, controllerPath, {\n            name:controllerName.replace(/Controller$/i,'')\n        }).then(()=> {\n            console.log('INFO','The operation was completed succesfully.');\n              return process.exit(0);\n        }).catch((err)=> {\n            console.error('ERROR','An error occurred while generating controller.');\n            console.error(err);\n            return process.exit(1);\n        });\n       \n    });\n    \n}"]}