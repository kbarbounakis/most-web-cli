{"version":3,"sources":["commands/cat.js"],"names":["builder","handler","getConfiguration","getHttpApplication","QUERY_OPTS","command","desc","yargs","option","describe","default","argv","options","model","console","error","process","exit","dev","env","NODE_ENV","app","execute","context","query","forEach","x","hasOwnProperty","filter","err","q","source","count","silent","getList","getItems","then","res","top","log","JSON","stringify","catch"],"mappings":"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","file":"cat.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport {getConfiguration, getHttpApplication} from '../util';\n\nconst QUERY_OPTS = ['filter', 'expand', 'order', 'group', 'top', 'skip', 'count', 'select'];\n\nexport const command = 'cat <model> [options]';\n\nexport const desc = 'Query data';\n\nexport function builder(yargs) {\n    return yargs.option('model', {\n        describe:'the target model'\n    }).option('dev', {\n        default: false,\n        describe: 'enables development mode'\n    }).option('filter', {\n        default: null,\n        describe: 'defines query filter'\n    }).option('expand', {\n        default: null,\n        describe: 'defines query expand option'\n    }).option('group', {\n        default: null,\n        describe: 'defines query group by option'\n    }).option('top', {\n        default: 25,\n        describe: 'defines query top option'\n    }).option('skip', {\n        default: 0,\n        describe: 'defines query skip option'\n    }).option('count', {\n        default: false,\n        describe: 'defines query count option'\n    }).option('select', {\n        default: null,\n        describe: 'defines query select option'\n    }).option('order', {\n        default: null,\n        describe: 'defines query order by option'\n    });\n}\n\nexport function handler(argv) {\n    let options = getConfiguration();\n    if (typeof argv.model === 'undefined' || argv.model === null) {\n        console.error('ERROR','The target cannot be empty');\n        process.exit(1);\n    }\n    if (argv.dev) {\n        //set development mode\n        process.env.NODE_ENV='development';\n    }\n    let app = getHttpApplication(options);\n    app.execute((context)=> {\n        try {\n            let model = context.model(argv.model);\n            if (typeof model === 'undefined' || model === null) {\n                console.error('ERROR','Target model cannot be found.');\n               return process.exit(1);\n            }\n            let query={};\n            QUERY_OPTS.forEach((x)=> {\n                if (argv.hasOwnProperty(x) && argv[x]) {\n                    query[`$${x}`] = argv[x];\n                }\n            });\n            //build query options\n            model.filter(query, (err, q)=> {\n                if (err) {\n                    console.error('ERROR','An error occurred while applying query.');\n                        console.error(err);\n                        return process.exit(1);\n                }\n                \n                let source = argv.count ? q.silent().getList() : q.silent().getItems();\n                return source.then((res)=> {\n                        if (res) {\n                            if (argv.top === 1 && !argv.count) {\n                                console.log(JSON.stringify(res[0],null,4));\n                            }\n                            else {\n                                console.log(JSON.stringify(res,null,4));\n                            }\n                        }\n                        process.exit(0);\n                    }).catch((err)=> {\n                        console.error('ERROR','An error occurred while querying data.');\n                        console.error(err);\n                        return process.exit(1);\n                    });\n                \n            });\n        }\n        catch(err) {\n            console.error('ERROR','An error occurred while getting data.');\n            console.error(err);\n            process.exit(1);\n        }\n       \n    });\n}"]}