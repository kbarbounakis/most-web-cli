{"version":3,"sources":["commands/random.js"],"names":["builder","handler","command","desc","yargs","option","alias","choices","default","argv","type","console","log","RandomCommand","randomInt","min","max","randomHex","length","newGuid","randomString","UUID_CHARS","split","Math","floor","random","Buffer","toString","chars","str","i","substr","uuid","r","join"],"mappings":"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","file":"random.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nexport const command = 'random <type> [options]';\n\nexport const desc = 'Create a new random string, integer or guid';\n\n\nexport function builder(yargs) {\n    return yargs.option('type', {\n        alias:'t',\n        choices: ['int', 'string', 'guid', 'hex'],\n        default:'int'\n    }).option('min', {\n        default:0\n    }).option('max', {\n        default:1000000\n    }).option('length', {\n        alias:'l',\n        default:8\n    });\n}\n\nexport function handler(argv) {\n    if (argv.type === 'int') {\n        return console.log(RandomCommand.randomInt(argv.min,argv.max));\n    }\n    else if (argv.type === 'hex') {\n        return console.log(RandomCommand.randomHex(argv.length));\n    }\n    else if (argv.type === 'guid') {\n        return console.log(RandomCommand.newGuid());\n    }\n    else if (argv.type === 'string') {\n        return console.log(RandomCommand.randomString(argv.length));\n    }\n}\n\nconst UUID_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\nexport class RandomCommand {\n\n    static randomInt(min, max) {\n        return Math.floor(Math.random()*max) + min;\n    }\n\n    /**\n     *\n     * @param {number=} length\n     * @return {string}\n     */\n    static randomHex(length) {\n        length = length || 16;\n        return new Buffer(RandomCommand.randomString(length)).toString('hex');\n    }\n\n    /**\n     *\n     * @param {number=} length\n     * @return {string}\n     */\n    static randomString(length) {\n        length = length || 16;\n        let chars = \"abcdefghkmnopqursuvwxz2456789ABCDEFHJKLMNPQURSTUVWXYZ\";\n        let str = \"\";\n        for(let i = 0; i < length; i++) {\n            str += chars.substr(RandomCommand.randomInt(0, chars.length-1),1);\n        }\n        return str;\n    }\n\n    /**\n     *\n     * @return {string}\n     */\n    static  newGuid() {\n        let chars = UUID_CHARS, uuid = [], i;\n        // rfc4122, version 4 form\n        let r;\n        // rfc4122 requires these characters\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n        uuid[14] = '4';\n\n        // Fill in random data.  At i==19 set the high bits of clock sequence as\n        // per rfc4122, sec. 4.1.5\n        for (i = 0; i < 36; i++) {\n            if (!uuid[i]) {\n                r = 0 | Math.random()*16;\n                uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n            }\n        }\n        return uuid.join('');\n    }\n\n}"]}